pipeline {
    agent any

    // environment {
    //     // AWS_ACCESS_KEY_ID_PART1 = credentials('AKIA34AMDHX')
    //     // AWS_ACCESS_KEY_ID_PART2 = credentials('FYD2GUCUU')
    //     // AWS_SECRET_ACCESS_KEY1 = credentials('tEYaanUNiP64HL4mH')
    //     // AWS_SECRET_ACCESS_KEY2 = credentials('ZtE+U2WCffSz29wJu21XaO5')
    //     // AWS_ACCESS_KEY_ID = credentials('AKIA34AMDHX'+'FYD2GUCUU')  // Set up AWS credentials in Jenkins
    //     // AWS_SECRET_ACCESS_KEY = credentials('tEYaanUNiP64HL4mH'+'ZtE+U2WCffSz29wJu21XaO5')
    //     // AWS_ACCESS_KEY_ID = "${AWS_ACCESS_KEY_ID_PART1}${AWS_ACCESS_KEY_ID_PART2}"
    //     // AWS_SECRET_ACCESS_KEY = "${AWS_SECRET_ACCESS_KEY1}${AWS_SECRET_ACCESS_KEY2}"
    // }
    environment {
        AWS_ACCESS_KEY_ID = credentials('f92706c5-6299-4913-b210-527e03fe6dc3')  // Using the ID
        AWS_SECRET_ACCESS_KEY = credentials('f92706c5-6299-4913-b210-527e03fe6dc3')  // Using the same ID for secret
    }
    tools {
            git 'Default' // or leave blank if Jenkins is auto-detecting
        }
    stages {
        stage('Checkout') {
            steps {
                script {
                try {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],  // Specify the branch here
                            userRemoteConfigs: [[
                                url: 'https://github.com/Akshaykushawaha/E-commerce-full-stack-project.git'
                            ]]
                        ])
                    } catch (Exception e) {
                        error "Checkout failed: ${e.message}"
                    }
            }
        }
        }
        stage('Check Directory') {
            steps {
                script {
                    sh 'pwd'  // Print the current working directory
                    sh 'ls -la'  // List files in the directory
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'docker-compose -f ./docker-compose.yml build'
                    } catch (Exception e) {
                        error "Build failed: ${e.message}"  // Mark the build as failed with a message
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh 'docker-compose run web pytest --junitxml=reports/results.xml tests/'
                    } catch (Exception e) {
                        error "Test execution failed: ${e.message}"  // Mark the build as failed with a message
                    }
                }
            }
        }
        stage('Terraform Init') {
            steps {
                script {
                    try {
                        sh 'terraform init'
                    } catch (Exception e) {
                        error "Terraform init failed: ${e.message}"  // Mark the build as failed with a message
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                script {
                    try {
                        sh 'terraform plan -out=tfplan'  // Create a plan file
                    } catch (Exception e) {
                        error "Terraform plan failed: ${e.message}"
                    }
                }
            }
        }
        stage('Terraform Apply') {
            steps {
                script {
                    try {
                        sh 'terraform apply -auto-approve'
                    } catch (Exception e) {
                        error "Terraform apply failed: ${e.message}"  // Mark the build as failed with a message
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    try {
                        sh 'docker-compose up -d'
                    } catch (Exception e) {
                        error "Deployment failed: ${e.message}"  // Mark the build as failed with a message
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (env.WORKSPACE) {
                    cleanWs()  // Clean workspace if WORKSPACE variable is available
                } else {
                    echo "No workspace available to clean."
                }
            }
        }
    }
}
